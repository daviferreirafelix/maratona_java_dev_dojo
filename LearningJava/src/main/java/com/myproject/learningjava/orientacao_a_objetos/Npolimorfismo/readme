Existe uma arquitetura de projetos chamada MVC, onde é separada o domínio/banco de dados (M - Model), o visualizador
(V - View) e a regra de negócios/serviço (C - controller)

Polimorfismo é um conceito que se aplica a heranças (superclasses e subclasses), onde é possível fazer a referencia a
uma superclasse enquanto o objeto criado a partir desta referencia é do tipo de uma de suas subclasses

Quando uma variável de referencia faz referencia a uma superclasse e seu objeto a uma subclasse, pode ocorrer de esta
subclasse ter alguma propriedade ou método não pré-existentes na superclasse, tornando impossível o acesso a este método ou
propriedade através deste objeto criado da referencia da superclasse, pois o mesmo só existe na subclasse

Quem executa a classe é sempre o objeto, ele é o responsável por dar a vida ao código executando todos os seus métodos quando
chamados ou se chamados por outros objetos, com isso, podemos executar um objeto de uma subclasse mesmo quando a variavel de
referencia está fazendo referencia a superclasse, pois a subclasse herda tudo/é filha da superclasse

Ao utilizar o polimorfismo, é possivel passá-lo também como parametro para métodos, onde é indicada a superclasse no parametro
e na chamada do método é passado como argumento a subclasse pra este método, evitando de ter que escrever um método especifico
para cada chamada de subclasse, diminuindo o acoplamento de classes e a quantidade de código para escrever

Em polimorfismo existe o conceito de conversões, como o widening cast, que é quando fazemos referencia a uma classe mais
genérica enquanto atribuimos a esta variável de referencia um objeto de uma subclasse mais específica

Existe também o narrowing cast, que consiste em transferir um objeto de uma superclasse para uma variável de referencia
de uma subclasse desta superclasse. Pra não haver problemas de compilação, é necessário espefcificar, na hora do narrowing cast,
qual subclasse estará sendo atribuida a superclasse através do cast explicito, que é escrevendo o nome esepcifico da subclasse
dentro de () antes do objeto da superclasse

É possível programar orientado a interfaces, que é quando se instancia uma interface genérica e cria um objeto a partir desta
instancia de qualquer subclasse que herda desta interface, sendo possível executar um método sobrescrito nestas subclasses
somente atribuindo o objeto dela